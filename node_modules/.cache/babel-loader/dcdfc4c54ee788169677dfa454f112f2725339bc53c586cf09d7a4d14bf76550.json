{"ast":null,"code":"import { useMemo } from 'react';\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nfunction useForkRef(refA, refB) {\n  return useMemo(() => {\n    if (refA == null && refB == null) {\n      return null;\n    }\n    return refValue => {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}\nexport { useForkRef as default };","map":{"version":3,"names":["useMemo","setRef","ref","value","current","useForkRef","refA","refB","refValue","default"],"sources":["/Users/eliana/Documents/Code/darighost.github.io/node_modules/react95/dist/common/hooks/useForkRef.mjs"],"sourcesContent":["import { useMemo } from 'react';\n\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\nfunction useForkRef(refA, refB) {\n  return useMemo(() => {\n    if (refA == null && refB == null) {\n      return null;\n    }\n    return (refValue) => {\n      setRef(refA, refValue);\n      setRef(refB, refValue);\n    };\n  }, [refA, refB]);\n}\n\nexport { useForkRef as default };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAE;EAC1B,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;IAC7BA,GAAG,CAACC,KAAK,CAAC;EACZ,CAAC,MAAM,IAAID,GAAG,EAAE;IACdA,GAAG,CAACE,OAAO,GAAGD,KAAK;EACrB;AACF;AACA,SAASE,UAAUA,CAACC,IAAI,EAAEC,IAAI,EAAE;EAC9B,OAAOP,OAAO,CAAC,MAAM;IACnB,IAAIM,IAAI,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,EAAE;MAChC,OAAO,IAAI;IACb;IACA,OAAQC,QAAQ,IAAK;MACnBP,MAAM,CAACK,IAAI,EAAEE,QAAQ,CAAC;MACtBP,MAAM,CAACM,IAAI,EAAEC,QAAQ,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACF,IAAI,EAAEC,IAAI,CAAC,CAAC;AAClB;AAEA,SAASF,UAAU,IAAII,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}