{"ast":null,"code":"import { useRef, useMemo, useState, useCallback, useEffect } from 'react';\nimport { KEYBOARD_KEY_CODES } from '../common/constants.mjs';\nimport useControlledOrUncontrolled from '../common/hooks/useControlledOrUncontrolled.mjs';\nimport { clamp } from '../common/utils/index.mjs';\nconst TYPING_RESET_DELAY = 1e3;\nconst useSelectState = _ref => {\n  let {\n    onBlur,\n    onChange,\n    onClose,\n    onFocus,\n    onKeyDown,\n    onMouseDown,\n    onOpen,\n    open: openProp,\n    options,\n    readOnly,\n    value,\n    selectRef,\n    setValue,\n    wrapperRef\n  } = _ref;\n  const dropdownRef = useRef(null);\n  const optionRefs = useRef([]);\n  const selectedIndex = useRef(0);\n  const activeIndex = useRef(0);\n  const focusIndexWhenSet = useRef();\n  const typingMode = useRef(\"search\");\n  const typedString = useRef(\"\");\n  const typingTimer = useRef();\n  const [open, setOpen] = useControlledOrUncontrolled({\n    defaultValue: false,\n    onChange: onOpen,\n    onChangePropName: \"onOpen\",\n    readOnly,\n    value: openProp,\n    valuePropName: \"open\"\n  });\n  const selectedOption = useMemo(() => {\n    const index = options.findIndex(option => option.value === value);\n    selectedIndex.current = clamp(index, 0, null);\n    return options[index];\n  }, [options, value]);\n  const [activeOption, setActiveOption] = useState(options[0]);\n  const focusOption = useCallback(index => {\n    const dropdownEl = dropdownRef.current;\n    const optionEl = optionRefs.current[index];\n    if (!optionEl || !dropdownEl) {\n      focusIndexWhenSet.current = index;\n      return;\n    }\n    focusIndexWhenSet.current = void 0;\n    const dropdownHeight = dropdownEl.clientHeight;\n    const dropdownScrollTop = dropdownEl.scrollTop;\n    const dropdownScrollEnd = dropdownEl.scrollTop + dropdownHeight;\n    const optionTop = optionEl.offsetTop;\n    const optionHeight = optionEl.offsetHeight;\n    const optionBottom = optionEl.offsetTop + optionEl.offsetHeight;\n    if (optionTop < dropdownScrollTop) {\n      dropdownEl.scrollTo(0, optionTop);\n    }\n    if (optionBottom > dropdownScrollEnd) {\n      dropdownEl.scrollTo(0, optionTop - dropdownHeight + optionHeight);\n    }\n    optionEl.focus({\n      preventScroll: true\n    });\n  }, [dropdownRef]);\n  const activateOption = useCallback(function (indexOrOption) {\n    let {\n      scroll\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    const lastIndex = options.length - 1;\n    let index;\n    switch (indexOrOption) {\n      case \"first\":\n        {\n          index = 0;\n          break;\n        }\n      case \"last\":\n        {\n          index = lastIndex;\n          break;\n        }\n      case \"next\":\n        {\n          index = clamp(activeIndex.current + 1, 0, lastIndex);\n          break;\n        }\n      case \"previous\":\n        {\n          index = clamp(activeIndex.current - 1, 0, lastIndex);\n          break;\n        }\n      case \"selected\":\n        {\n          index = clamp((_a = selectedIndex.current) !== null && _a !== void 0 ? _a : 0, 0, lastIndex);\n          break;\n        }\n      default:\n        index = indexOrOption;\n    }\n    activeIndex.current = index;\n    setActiveOption(options[index]);\n    if (scroll) {\n      focusOption(index);\n    }\n  }, [activeIndex, options, focusOption]);\n  const openDropdown = useCallback(_ref2 => {\n    let {\n      fromEvent\n    } = _ref2;\n    setOpen(true);\n    activateOption(\"selected\", {\n      scroll: true\n    });\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen({\n      fromEvent\n    });\n  }, [activateOption, onOpen, setOpen]);\n  const clearSearchFromTyping = useCallback(() => {\n    typingMode.current = \"search\";\n    typedString.current = \"\";\n    clearTimeout(typingTimer.current);\n  }, []);\n  const closeDropdown = useCallback(_ref3 => {\n    let {\n      focusSelect,\n      fromEvent\n    } = _ref3;\n    var _a;\n    onClose === null || onClose === void 0 ? void 0 : onClose({\n      fromEvent\n    });\n    setOpen(false);\n    setActiveOption(options[0]);\n    clearSearchFromTyping();\n    focusIndexWhenSet.current = void 0;\n    if (focusSelect) {\n      (_a = selectRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [clearSearchFromTyping, onClose, options, selectRef, setOpen]);\n  const toggleDropdown = useCallback(_ref4 => {\n    let {\n      fromEvent\n    } = _ref4;\n    if (open) {\n      closeDropdown({\n        focusSelect: false,\n        fromEvent\n      });\n    } else {\n      openDropdown({\n        fromEvent\n      });\n    }\n  }, [closeDropdown, openDropdown, open]);\n  const selectOptionIndex = useCallback((optionIndex, _ref5) => {\n    let {\n      fromEvent\n    } = _ref5;\n    if (selectedIndex.current === optionIndex) {\n      return;\n    }\n    selectedIndex.current = optionIndex;\n    setValue(options[optionIndex].value);\n    onChange === null || onChange === void 0 ? void 0 : onChange(options[optionIndex], {\n      fromEvent\n    });\n  }, [onChange, options, setValue]);\n  const selectActiveOptionAndClose = useCallback(_ref6 => {\n    let {\n      focusSelect,\n      fromEvent\n    } = _ref6;\n    selectOptionIndex(activeIndex.current, {\n      fromEvent\n    });\n    closeDropdown({\n      focusSelect,\n      fromEvent\n    });\n  }, [closeDropdown, selectOptionIndex]);\n  const searchFromTyping = useCallback((letter, _ref7) => {\n    let {\n      fromEvent,\n      select\n    } = _ref7;\n    var _a;\n    if (typingMode.current === \"cycleFirstLetter\" && letter !== typedString.current) {\n      typingMode.current = \"search\";\n    }\n    if (letter === typedString.current) {\n      typingMode.current = \"cycleFirstLetter\";\n    } else {\n      typedString.current += letter;\n    }\n    switch (typingMode.current) {\n      case \"search\":\n        {\n          let foundOptionIndex = options.findIndex(option => {\n            var _a2;\n            return ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(typedString.current)) === 0;\n          });\n          if (foundOptionIndex < 0) {\n            foundOptionIndex = options.findIndex(option => {\n              var _a2;\n              return ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(letter)) === 0;\n            });\n            typedString.current = letter;\n          }\n          if (foundOptionIndex >= 0) {\n            if (select) {\n              selectOptionIndex(foundOptionIndex, {\n                fromEvent\n              });\n            } else {\n              activateOption(foundOptionIndex, {\n                scroll: true\n              });\n            }\n          }\n          break;\n        }\n      case \"cycleFirstLetter\":\n        {\n          const currentOptionIndex = select ? (_a = selectedIndex.current) !== null && _a !== void 0 ? _a : -1 : activeIndex.current;\n          let foundOptionIndex = options.findIndex((option, index) => {\n            var _a2;\n            return index > currentOptionIndex && ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(letter)) === 0;\n          });\n          if (foundOptionIndex < 0) {\n            foundOptionIndex = options.findIndex(option => {\n              var _a2;\n              return ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(letter)) === 0;\n            });\n          }\n          if (foundOptionIndex >= 0) {\n            if (select) {\n              selectOptionIndex(foundOptionIndex, {\n                fromEvent\n              });\n            } else {\n              activateOption(foundOptionIndex, {\n                scroll: true\n              });\n            }\n          }\n          break;\n        }\n    }\n    clearTimeout(typingTimer.current);\n    typingTimer.current = setTimeout(() => {\n      if (typingMode.current === \"search\") {\n        typedString.current = \"\";\n      }\n    }, TYPING_RESET_DELAY);\n  }, [activateOption, options, selectOptionIndex]);\n  const handleMouseDown = useCallback(event => {\n    var _a;\n    if (event.button !== 0) {\n      return;\n    }\n    event.preventDefault();\n    (_a = selectRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    toggleDropdown({\n      fromEvent: event\n    });\n    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(event);\n  }, [onMouseDown, selectRef, toggleDropdown]);\n  const handleOptionClick = useCallback(event => {\n    selectActiveOptionAndClose({\n      focusSelect: true,\n      fromEvent: event\n    });\n  }, [selectActiveOptionAndClose]);\n  const handleKeyDown = useCallback(event => {\n    const {\n      altKey,\n      code,\n      ctrlKey,\n      metaKey,\n      shiftKey\n    } = event;\n    const {\n      ARROW_DOWN,\n      ARROW_UP,\n      END,\n      ENTER,\n      ESC,\n      HOME,\n      SPACE,\n      TAB\n    } = KEYBOARD_KEY_CODES;\n    const modifierKey = altKey || ctrlKey || metaKey || shiftKey;\n    const modifierKeyButShift = altKey || ctrlKey || metaKey;\n    if (code === TAB && modifierKeyButShift || code !== TAB && modifierKey) {\n      return;\n    }\n    switch (code) {\n      case ARROW_DOWN:\n        {\n          event.preventDefault();\n          if (!open) {\n            openDropdown({\n              fromEvent: event\n            });\n            return;\n          }\n          activateOption(\"next\", {\n            scroll: true\n          });\n          break;\n        }\n      case ARROW_UP:\n        {\n          event.preventDefault();\n          if (!open) {\n            openDropdown({\n              fromEvent: event\n            });\n            return;\n          }\n          activateOption(\"previous\", {\n            scroll: true\n          });\n          break;\n        }\n      case END:\n        {\n          event.preventDefault();\n          if (!open) {\n            openDropdown({\n              fromEvent: event\n            });\n            return;\n          }\n          activateOption(\"last\", {\n            scroll: true\n          });\n          break;\n        }\n      case ENTER:\n        {\n          if (!open) {\n            return;\n          }\n          event.preventDefault();\n          selectActiveOptionAndClose({\n            focusSelect: true,\n            fromEvent: event\n          });\n          break;\n        }\n      case ESC:\n        {\n          if (!open) {\n            return;\n          }\n          event.preventDefault();\n          closeDropdown({\n            focusSelect: true,\n            fromEvent: event\n          });\n          break;\n        }\n      case HOME:\n        {\n          event.preventDefault();\n          if (!open) {\n            openDropdown({\n              fromEvent: event\n            });\n            return;\n          }\n          activateOption(\"first\", {\n            scroll: true\n          });\n          break;\n        }\n      case SPACE:\n        {\n          event.preventDefault();\n          if (open) {\n            selectActiveOptionAndClose({\n              focusSelect: true,\n              fromEvent: event\n            });\n          } else {\n            openDropdown({\n              fromEvent: event\n            });\n          }\n          break;\n        }\n      case TAB:\n        {\n          if (!open) {\n            return;\n          }\n          if (!shiftKey) {\n            event.preventDefault();\n          }\n          selectActiveOptionAndClose({\n            focusSelect: !shiftKey,\n            fromEvent: event\n          });\n          break;\n        }\n      default:\n        if (!modifierKey && code.match(/^Key/)) {\n          event.preventDefault();\n          event.stopPropagation();\n          searchFromTyping(code.replace(/^Key/, \"\"), {\n            select: !open,\n            fromEvent: event\n          });\n        }\n    }\n  }, [activateOption, closeDropdown, open, openDropdown, searchFromTyping, selectActiveOptionAndClose]);\n  const handleButtonKeyDown = useCallback(event => {\n    handleKeyDown(event);\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  }, [handleKeyDown, onKeyDown]);\n  const handleActivateOptionIndex = useCallback(index => {\n    activateOption(index);\n  }, [activateOption]);\n  const handleBlur = useCallback(event => {\n    if (open) {\n      return;\n    }\n    clearSearchFromTyping();\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  }, [clearSearchFromTyping, onBlur, open]);\n  const handleFocus = useCallback(event => {\n    clearSearchFromTyping();\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n  }, [clearSearchFromTyping, onFocus]);\n  const handleSetDropdownRef = useCallback(ref => {\n    dropdownRef.current = ref;\n    if (focusIndexWhenSet.current !== void 0) {\n      focusOption(focusIndexWhenSet.current);\n    }\n  }, [focusOption]);\n  const handleSetOptionRef = useCallback((optionRef, index) => {\n    optionRefs.current[index] = optionRef;\n    if (focusIndexWhenSet.current === index) {\n      focusOption(focusIndexWhenSet.current);\n    }\n  }, [focusOption]);\n  useEffect(() => {\n    if (!open) {\n      return () => {};\n    }\n    const outsideMouseDown = event => {\n      var _a;\n      const target = event.target;\n      if (!((_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))) {\n        event.preventDefault();\n        closeDropdown({\n          focusSelect: false,\n          fromEvent: event\n        });\n      }\n    };\n    document.addEventListener(\"mousedown\", outsideMouseDown);\n    return () => {\n      document.removeEventListener(\"mousedown\", outsideMouseDown);\n    };\n  }, [closeDropdown, open, wrapperRef]);\n  return useMemo(() => ({\n    activeOption,\n    handleActivateOptionIndex,\n    handleBlur,\n    handleButtonKeyDown,\n    handleDropdownKeyDown: handleKeyDown,\n    handleFocus,\n    handleMouseDown,\n    handleOptionClick,\n    handleSetDropdownRef,\n    handleSetOptionRef,\n    open,\n    selectedOption\n  }), [activeOption, handleActivateOptionIndex, handleBlur, handleButtonKeyDown, handleFocus, handleKeyDown, handleMouseDown, handleOptionClick, handleSetDropdownRef, handleSetOptionRef, open, selectedOption]);\n};\nexport { useSelectState };","map":{"version":3,"names":["useRef","useMemo","useState","useCallback","useEffect","KEYBOARD_KEY_CODES","useControlledOrUncontrolled","clamp","TYPING_RESET_DELAY","useSelectState","_ref","onBlur","onChange","onClose","onFocus","onKeyDown","onMouseDown","onOpen","open","openProp","options","readOnly","value","selectRef","setValue","wrapperRef","dropdownRef","optionRefs","selectedIndex","activeIndex","focusIndexWhenSet","typingMode","typedString","typingTimer","setOpen","defaultValue","onChangePropName","valuePropName","selectedOption","index","findIndex","option","current","activeOption","setActiveOption","focusOption","dropdownEl","optionEl","dropdownHeight","clientHeight","dropdownScrollTop","scrollTop","dropdownScrollEnd","optionTop","offsetTop","optionHeight","offsetHeight","optionBottom","scrollTo","focus","preventScroll","activateOption","indexOrOption","scroll","arguments","length","undefined","_a","lastIndex","openDropdown","_ref2","fromEvent","clearSearchFromTyping","clearTimeout","closeDropdown","_ref3","focusSelect","toggleDropdown","_ref4","selectOptionIndex","optionIndex","_ref5","selectActiveOptionAndClose","_ref6","searchFromTyping","letter","_ref7","select","foundOptionIndex","_a2","label","toLocaleUpperCase","indexOf","currentOptionIndex","setTimeout","handleMouseDown","event","button","preventDefault","handleOptionClick","handleKeyDown","altKey","code","ctrlKey","metaKey","shiftKey","ARROW_DOWN","ARROW_UP","END","ENTER","ESC","HOME","SPACE","TAB","modifierKey","modifierKeyButShift","match","stopPropagation","replace","handleButtonKeyDown","handleActivateOptionIndex","handleBlur","handleFocus","handleSetDropdownRef","ref","handleSetOptionRef","optionRef","outsideMouseDown","target","contains","document","addEventListener","removeEventListener","handleDropdownKeyDown"],"sources":["/Users/danielbednarski/darighost.github.io/node_modules/react95/dist/Select/useSelectState.mjs"],"sourcesContent":["import { useRef, useMemo, useState, useCallback, useEffect } from 'react';\nimport { KEYBOARD_KEY_CODES } from '../common/constants.mjs';\nimport useControlledOrUncontrolled from '../common/hooks/useControlledOrUncontrolled.mjs';\nimport { clamp } from '../common/utils/index.mjs';\n\nconst TYPING_RESET_DELAY = 1e3;\nconst useSelectState = ({ onBlur, onChange, onClose, onFocus, onKeyDown, onMouseDown, onOpen, open: openProp, options, readOnly, value, selectRef, setValue, wrapperRef }) => {\n  const dropdownRef = useRef(null);\n  const optionRefs = useRef([]);\n  const selectedIndex = useRef(0);\n  const activeIndex = useRef(0);\n  const focusIndexWhenSet = useRef();\n  const typingMode = useRef(\"search\");\n  const typedString = useRef(\"\");\n  const typingTimer = useRef();\n  const [open, setOpen] = useControlledOrUncontrolled({\n    defaultValue: false,\n    onChange: onOpen,\n    onChangePropName: \"onOpen\",\n    readOnly,\n    value: openProp,\n    valuePropName: \"open\"\n  });\n  const selectedOption = useMemo(() => {\n    const index = options.findIndex((option) => option.value === value);\n    selectedIndex.current = clamp(index, 0, null);\n    return options[index];\n  }, [options, value]);\n  const [activeOption, setActiveOption] = useState(options[0]);\n  const focusOption = useCallback((index) => {\n    const dropdownEl = dropdownRef.current;\n    const optionEl = optionRefs.current[index];\n    if (!optionEl || !dropdownEl) {\n      focusIndexWhenSet.current = index;\n      return;\n    }\n    focusIndexWhenSet.current = void 0;\n    const dropdownHeight = dropdownEl.clientHeight;\n    const dropdownScrollTop = dropdownEl.scrollTop;\n    const dropdownScrollEnd = dropdownEl.scrollTop + dropdownHeight;\n    const optionTop = optionEl.offsetTop;\n    const optionHeight = optionEl.offsetHeight;\n    const optionBottom = optionEl.offsetTop + optionEl.offsetHeight;\n    if (optionTop < dropdownScrollTop) {\n      dropdownEl.scrollTo(0, optionTop);\n    }\n    if (optionBottom > dropdownScrollEnd) {\n      dropdownEl.scrollTo(0, optionTop - dropdownHeight + optionHeight);\n    }\n    optionEl.focus({ preventScroll: true });\n  }, [dropdownRef]);\n  const activateOption = useCallback((indexOrOption, { scroll } = {}) => {\n    var _a;\n    const lastIndex = options.length - 1;\n    let index;\n    switch (indexOrOption) {\n      case \"first\": {\n        index = 0;\n        break;\n      }\n      case \"last\": {\n        index = lastIndex;\n        break;\n      }\n      case \"next\": {\n        index = clamp(activeIndex.current + 1, 0, lastIndex);\n        break;\n      }\n      case \"previous\": {\n        index = clamp(activeIndex.current - 1, 0, lastIndex);\n        break;\n      }\n      case \"selected\": {\n        index = clamp((_a = selectedIndex.current) !== null && _a !== void 0 ? _a : 0, 0, lastIndex);\n        break;\n      }\n      default:\n        index = indexOrOption;\n    }\n    activeIndex.current = index;\n    setActiveOption(options[index]);\n    if (scroll) {\n      focusOption(index);\n    }\n  }, [activeIndex, options, focusOption]);\n  const openDropdown = useCallback(({ fromEvent }) => {\n    setOpen(true);\n    activateOption(\"selected\", { scroll: true });\n    onOpen === null || onOpen === void 0 ? void 0 : onOpen({ fromEvent });\n  }, [activateOption, onOpen, setOpen]);\n  const clearSearchFromTyping = useCallback(() => {\n    typingMode.current = \"search\";\n    typedString.current = \"\";\n    clearTimeout(typingTimer.current);\n  }, []);\n  const closeDropdown = useCallback(({ focusSelect, fromEvent }) => {\n    var _a;\n    onClose === null || onClose === void 0 ? void 0 : onClose({ fromEvent });\n    setOpen(false);\n    setActiveOption(options[0]);\n    clearSearchFromTyping();\n    focusIndexWhenSet.current = void 0;\n    if (focusSelect) {\n      (_a = selectRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [clearSearchFromTyping, onClose, options, selectRef, setOpen]);\n  const toggleDropdown = useCallback(({ fromEvent }) => {\n    if (open) {\n      closeDropdown({ focusSelect: false, fromEvent });\n    } else {\n      openDropdown({ fromEvent });\n    }\n  }, [closeDropdown, openDropdown, open]);\n  const selectOptionIndex = useCallback((optionIndex, { fromEvent }) => {\n    if (selectedIndex.current === optionIndex) {\n      return;\n    }\n    selectedIndex.current = optionIndex;\n    setValue(options[optionIndex].value);\n    onChange === null || onChange === void 0 ? void 0 : onChange(options[optionIndex], { fromEvent });\n  }, [onChange, options, setValue]);\n  const selectActiveOptionAndClose = useCallback(({ focusSelect, fromEvent }) => {\n    selectOptionIndex(activeIndex.current, { fromEvent });\n    closeDropdown({ focusSelect, fromEvent });\n  }, [closeDropdown, selectOptionIndex]);\n  const searchFromTyping = useCallback((letter, { fromEvent, select }) => {\n    var _a;\n    if (typingMode.current === \"cycleFirstLetter\" && letter !== typedString.current) {\n      typingMode.current = \"search\";\n    }\n    if (letter === typedString.current) {\n      typingMode.current = \"cycleFirstLetter\";\n    } else {\n      typedString.current += letter;\n    }\n    switch (typingMode.current) {\n      case \"search\": {\n        let foundOptionIndex = options.findIndex((option) => {\n          var _a2;\n          return ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(typedString.current)) === 0;\n        });\n        if (foundOptionIndex < 0) {\n          foundOptionIndex = options.findIndex((option) => {\n            var _a2;\n            return ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(letter)) === 0;\n          });\n          typedString.current = letter;\n        }\n        if (foundOptionIndex >= 0) {\n          if (select) {\n            selectOptionIndex(foundOptionIndex, { fromEvent });\n          } else {\n            activateOption(foundOptionIndex, { scroll: true });\n          }\n        }\n        break;\n      }\n      case \"cycleFirstLetter\": {\n        const currentOptionIndex = select ? (_a = selectedIndex.current) !== null && _a !== void 0 ? _a : -1 : activeIndex.current;\n        let foundOptionIndex = options.findIndex((option, index) => {\n          var _a2;\n          return index > currentOptionIndex && ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(letter)) === 0;\n        });\n        if (foundOptionIndex < 0) {\n          foundOptionIndex = options.findIndex((option) => {\n            var _a2;\n            return ((_a2 = option.label) === null || _a2 === void 0 ? void 0 : _a2.toLocaleUpperCase().indexOf(letter)) === 0;\n          });\n        }\n        if (foundOptionIndex >= 0) {\n          if (select) {\n            selectOptionIndex(foundOptionIndex, { fromEvent });\n          } else {\n            activateOption(foundOptionIndex, { scroll: true });\n          }\n        }\n        break;\n      }\n    }\n    clearTimeout(typingTimer.current);\n    typingTimer.current = setTimeout(() => {\n      if (typingMode.current === \"search\") {\n        typedString.current = \"\";\n      }\n    }, TYPING_RESET_DELAY);\n  }, [activateOption, options, selectOptionIndex]);\n  const handleMouseDown = useCallback((event) => {\n    var _a;\n    if (event.button !== 0) {\n      return;\n    }\n    event.preventDefault();\n    (_a = selectRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    toggleDropdown({ fromEvent: event });\n    onMouseDown === null || onMouseDown === void 0 ? void 0 : onMouseDown(event);\n  }, [onMouseDown, selectRef, toggleDropdown]);\n  const handleOptionClick = useCallback((event) => {\n    selectActiveOptionAndClose({ focusSelect: true, fromEvent: event });\n  }, [selectActiveOptionAndClose]);\n  const handleKeyDown = useCallback((event) => {\n    const { altKey, code, ctrlKey, metaKey, shiftKey } = event;\n    const { ARROW_DOWN, ARROW_UP, END, ENTER, ESC, HOME, SPACE, TAB } = KEYBOARD_KEY_CODES;\n    const modifierKey = altKey || ctrlKey || metaKey || shiftKey;\n    const modifierKeyButShift = altKey || ctrlKey || metaKey;\n    if (code === TAB && modifierKeyButShift || code !== TAB && modifierKey) {\n      return;\n    }\n    switch (code) {\n      case ARROW_DOWN: {\n        event.preventDefault();\n        if (!open) {\n          openDropdown({ fromEvent: event });\n          return;\n        }\n        activateOption(\"next\", { scroll: true });\n        break;\n      }\n      case ARROW_UP: {\n        event.preventDefault();\n        if (!open) {\n          openDropdown({ fromEvent: event });\n          return;\n        }\n        activateOption(\"previous\", { scroll: true });\n        break;\n      }\n      case END: {\n        event.preventDefault();\n        if (!open) {\n          openDropdown({ fromEvent: event });\n          return;\n        }\n        activateOption(\"last\", { scroll: true });\n        break;\n      }\n      case ENTER: {\n        if (!open) {\n          return;\n        }\n        event.preventDefault();\n        selectActiveOptionAndClose({ focusSelect: true, fromEvent: event });\n        break;\n      }\n      case ESC: {\n        if (!open) {\n          return;\n        }\n        event.preventDefault();\n        closeDropdown({ focusSelect: true, fromEvent: event });\n        break;\n      }\n      case HOME: {\n        event.preventDefault();\n        if (!open) {\n          openDropdown({ fromEvent: event });\n          return;\n        }\n        activateOption(\"first\", { scroll: true });\n        break;\n      }\n      case SPACE: {\n        event.preventDefault();\n        if (open) {\n          selectActiveOptionAndClose({ focusSelect: true, fromEvent: event });\n        } else {\n          openDropdown({ fromEvent: event });\n        }\n        break;\n      }\n      case TAB: {\n        if (!open) {\n          return;\n        }\n        if (!shiftKey) {\n          event.preventDefault();\n        }\n        selectActiveOptionAndClose({\n          focusSelect: !shiftKey,\n          fromEvent: event\n        });\n        break;\n      }\n      default:\n        if (!modifierKey && code.match(/^Key/)) {\n          event.preventDefault();\n          event.stopPropagation();\n          searchFromTyping(code.replace(/^Key/, \"\"), {\n            select: !open,\n            fromEvent: event\n          });\n        }\n    }\n  }, [\n    activateOption,\n    closeDropdown,\n    open,\n    openDropdown,\n    searchFromTyping,\n    selectActiveOptionAndClose\n  ]);\n  const handleButtonKeyDown = useCallback((event) => {\n    handleKeyDown(event);\n    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);\n  }, [handleKeyDown, onKeyDown]);\n  const handleActivateOptionIndex = useCallback((index) => {\n    activateOption(index);\n  }, [activateOption]);\n  const handleBlur = useCallback((event) => {\n    if (open) {\n      return;\n    }\n    clearSearchFromTyping();\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  }, [clearSearchFromTyping, onBlur, open]);\n  const handleFocus = useCallback((event) => {\n    clearSearchFromTyping();\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n  }, [clearSearchFromTyping, onFocus]);\n  const handleSetDropdownRef = useCallback((ref) => {\n    dropdownRef.current = ref;\n    if (focusIndexWhenSet.current !== void 0) {\n      focusOption(focusIndexWhenSet.current);\n    }\n  }, [focusOption]);\n  const handleSetOptionRef = useCallback((optionRef, index) => {\n    optionRefs.current[index] = optionRef;\n    if (focusIndexWhenSet.current === index) {\n      focusOption(focusIndexWhenSet.current);\n    }\n  }, [focusOption]);\n  useEffect(() => {\n    if (!open) {\n      return () => {\n      };\n    }\n    const outsideMouseDown = (event) => {\n      var _a;\n      const target = event.target;\n      if (!((_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))) {\n        event.preventDefault();\n        closeDropdown({ focusSelect: false, fromEvent: event });\n      }\n    };\n    document.addEventListener(\"mousedown\", outsideMouseDown);\n    return () => {\n      document.removeEventListener(\"mousedown\", outsideMouseDown);\n    };\n  }, [closeDropdown, open, wrapperRef]);\n  return useMemo(() => ({\n    activeOption,\n    handleActivateOptionIndex,\n    handleBlur,\n    handleButtonKeyDown,\n    handleDropdownKeyDown: handleKeyDown,\n    handleFocus,\n    handleMouseDown,\n    handleOptionClick,\n    handleSetDropdownRef,\n    handleSetOptionRef,\n    open,\n    selectedOption\n  }), [\n    activeOption,\n    handleActivateOptionIndex,\n    handleBlur,\n    handleButtonKeyDown,\n    handleFocus,\n    handleKeyDown,\n    handleMouseDown,\n    handleOptionClick,\n    handleSetDropdownRef,\n    handleSetOptionRef,\n    open,\n    selectedOption\n  ]);\n};\n\nexport { useSelectState };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACzE,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,OAAOC,2BAA2B,MAAM,iDAAiD;AACzF,SAASC,KAAK,QAAQ,2BAA2B;AAEjD,MAAMC,kBAAkB,GAAG,GAAG;AAC9B,MAAMC,cAAc,GAAGC,IAAA,IAAuJ;EAAA,IAAtJ;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAEC,WAAW;IAAEC,MAAM;IAAEC,IAAI,EAAEC,QAAQ;IAAEC,OAAO;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,SAAS;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAAf,IAAA;EACvK,MAAMgB,WAAW,GAAG1B,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM2B,UAAU,GAAG3B,MAAM,CAAC,EAAE,CAAC;EAC7B,MAAM4B,aAAa,GAAG5B,MAAM,CAAC,CAAC,CAAC;EAC/B,MAAM6B,WAAW,GAAG7B,MAAM,CAAC,CAAC,CAAC;EAC7B,MAAM8B,iBAAiB,GAAG9B,MAAM,CAAC,CAAC;EAClC,MAAM+B,UAAU,GAAG/B,MAAM,CAAC,QAAQ,CAAC;EACnC,MAAMgC,WAAW,GAAGhC,MAAM,CAAC,EAAE,CAAC;EAC9B,MAAMiC,WAAW,GAAGjC,MAAM,CAAC,CAAC;EAC5B,MAAM,CAACkB,IAAI,EAAEgB,OAAO,CAAC,GAAG5B,2BAA2B,CAAC;IAClD6B,YAAY,EAAE,KAAK;IACnBvB,QAAQ,EAAEK,MAAM;IAChBmB,gBAAgB,EAAE,QAAQ;IAC1Bf,QAAQ;IACRC,KAAK,EAAEH,QAAQ;IACfkB,aAAa,EAAE;EACjB,CAAC,CAAC;EACF,MAAMC,cAAc,GAAGrC,OAAO,CAAC,MAAM;IACnC,MAAMsC,KAAK,GAAGnB,OAAO,CAACoB,SAAS,CAAEC,MAAM,IAAKA,MAAM,CAACnB,KAAK,KAAKA,KAAK,CAAC;IACnEM,aAAa,CAACc,OAAO,GAAGnC,KAAK,CAACgC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC;IAC7C,OAAOnB,OAAO,CAACmB,KAAK,CAAC;EACvB,CAAC,EAAE,CAACnB,OAAO,EAAEE,KAAK,CAAC,CAAC;EACpB,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAG1C,QAAQ,CAACkB,OAAO,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAMyB,WAAW,GAAG1C,WAAW,CAAEoC,KAAK,IAAK;IACzC,MAAMO,UAAU,GAAGpB,WAAW,CAACgB,OAAO;IACtC,MAAMK,QAAQ,GAAGpB,UAAU,CAACe,OAAO,CAACH,KAAK,CAAC;IAC1C,IAAI,CAACQ,QAAQ,IAAI,CAACD,UAAU,EAAE;MAC5BhB,iBAAiB,CAACY,OAAO,GAAGH,KAAK;MACjC;IACF;IACAT,iBAAiB,CAACY,OAAO,GAAG,KAAK,CAAC;IAClC,MAAMM,cAAc,GAAGF,UAAU,CAACG,YAAY;IAC9C,MAAMC,iBAAiB,GAAGJ,UAAU,CAACK,SAAS;IAC9C,MAAMC,iBAAiB,GAAGN,UAAU,CAACK,SAAS,GAAGH,cAAc;IAC/D,MAAMK,SAAS,GAAGN,QAAQ,CAACO,SAAS;IACpC,MAAMC,YAAY,GAAGR,QAAQ,CAACS,YAAY;IAC1C,MAAMC,YAAY,GAAGV,QAAQ,CAACO,SAAS,GAAGP,QAAQ,CAACS,YAAY;IAC/D,IAAIH,SAAS,GAAGH,iBAAiB,EAAE;MACjCJ,UAAU,CAACY,QAAQ,CAAC,CAAC,EAAEL,SAAS,CAAC;IACnC;IACA,IAAII,YAAY,GAAGL,iBAAiB,EAAE;MACpCN,UAAU,CAACY,QAAQ,CAAC,CAAC,EAAEL,SAAS,GAAGL,cAAc,GAAGO,YAAY,CAAC;IACnE;IACAR,QAAQ,CAACY,KAAK,CAAC;MAAEC,aAAa,EAAE;IAAK,CAAC,CAAC;EACzC,CAAC,EAAE,CAAClC,WAAW,CAAC,CAAC;EACjB,MAAMmC,cAAc,GAAG1D,WAAW,CAAC,UAAC2D,aAAa,EAAsB;IAAA,IAApB;MAAEC;IAAO,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAChE,IAAIG,EAAE;IACN,MAAMC,SAAS,GAAGhD,OAAO,CAAC6C,MAAM,GAAG,CAAC;IACpC,IAAI1B,KAAK;IACT,QAAQuB,aAAa;MACnB,KAAK,OAAO;QAAE;UACZvB,KAAK,GAAG,CAAC;UACT;QACF;MACA,KAAK,MAAM;QAAE;UACXA,KAAK,GAAG6B,SAAS;UACjB;QACF;MACA,KAAK,MAAM;QAAE;UACX7B,KAAK,GAAGhC,KAAK,CAACsB,WAAW,CAACa,OAAO,GAAG,CAAC,EAAE,CAAC,EAAE0B,SAAS,CAAC;UACpD;QACF;MACA,KAAK,UAAU;QAAE;UACf7B,KAAK,GAAGhC,KAAK,CAACsB,WAAW,CAACa,OAAO,GAAG,CAAC,EAAE,CAAC,EAAE0B,SAAS,CAAC;UACpD;QACF;MACA,KAAK,UAAU;QAAE;UACf7B,KAAK,GAAGhC,KAAK,CAAC,CAAC4D,EAAE,GAAGvC,aAAa,CAACc,OAAO,MAAM,IAAI,IAAIyB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,EAAE,CAAC,EAAEC,SAAS,CAAC;UAC5F;QACF;MACA;QACE7B,KAAK,GAAGuB,aAAa;IACzB;IACAjC,WAAW,CAACa,OAAO,GAAGH,KAAK;IAC3BK,eAAe,CAACxB,OAAO,CAACmB,KAAK,CAAC,CAAC;IAC/B,IAAIwB,MAAM,EAAE;MACVlB,WAAW,CAACN,KAAK,CAAC;IACpB;EACF,CAAC,EAAE,CAACV,WAAW,EAAET,OAAO,EAAEyB,WAAW,CAAC,CAAC;EACvC,MAAMwB,YAAY,GAAGlE,WAAW,CAACmE,KAAA,IAAmB;IAAA,IAAlB;MAAEC;IAAU,CAAC,GAAAD,KAAA;IAC7CpC,OAAO,CAAC,IAAI,CAAC;IACb2B,cAAc,CAAC,UAAU,EAAE;MAAEE,MAAM,EAAE;IAAK,CAAC,CAAC;IAC5C9C,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAAC;MAAEsD;IAAU,CAAC,CAAC;EACvE,CAAC,EAAE,CAACV,cAAc,EAAE5C,MAAM,EAAEiB,OAAO,CAAC,CAAC;EACrC,MAAMsC,qBAAqB,GAAGrE,WAAW,CAAC,MAAM;IAC9C4B,UAAU,CAACW,OAAO,GAAG,QAAQ;IAC7BV,WAAW,CAACU,OAAO,GAAG,EAAE;IACxB+B,YAAY,CAACxC,WAAW,CAACS,OAAO,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EACN,MAAMgC,aAAa,GAAGvE,WAAW,CAACwE,KAAA,IAAgC;IAAA,IAA/B;MAAEC,WAAW;MAAEL;IAAU,CAAC,GAAAI,KAAA;IAC3D,IAAIR,EAAE;IACNtD,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC;MAAE0D;IAAU,CAAC,CAAC;IACxErC,OAAO,CAAC,KAAK,CAAC;IACdU,eAAe,CAACxB,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3BoD,qBAAqB,CAAC,CAAC;IACvB1C,iBAAiB,CAACY,OAAO,GAAG,KAAK,CAAC;IAClC,IAAIkC,WAAW,EAAE;MACf,CAACT,EAAE,GAAG5C,SAAS,CAACmB,OAAO,MAAM,IAAI,IAAIyB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACR,KAAK,CAAC,CAAC;IAC1E;EACF,CAAC,EAAE,CAACa,qBAAqB,EAAE3D,OAAO,EAAEO,OAAO,EAAEG,SAAS,EAAEW,OAAO,CAAC,CAAC;EACjE,MAAM2C,cAAc,GAAG1E,WAAW,CAAC2E,KAAA,IAAmB;IAAA,IAAlB;MAAEP;IAAU,CAAC,GAAAO,KAAA;IAC/C,IAAI5D,IAAI,EAAE;MACRwD,aAAa,CAAC;QAAEE,WAAW,EAAE,KAAK;QAAEL;MAAU,CAAC,CAAC;IAClD,CAAC,MAAM;MACLF,YAAY,CAAC;QAAEE;MAAU,CAAC,CAAC;IAC7B;EACF,CAAC,EAAE,CAACG,aAAa,EAAEL,YAAY,EAAEnD,IAAI,CAAC,CAAC;EACvC,MAAM6D,iBAAiB,GAAG5E,WAAW,CAAC,CAAC6E,WAAW,EAAAC,KAAA,KAAoB;IAAA,IAAlB;MAAEV;IAAU,CAAC,GAAAU,KAAA;IAC/D,IAAIrD,aAAa,CAACc,OAAO,KAAKsC,WAAW,EAAE;MACzC;IACF;IACApD,aAAa,CAACc,OAAO,GAAGsC,WAAW;IACnCxD,QAAQ,CAACJ,OAAO,CAAC4D,WAAW,CAAC,CAAC1D,KAAK,CAAC;IACpCV,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACQ,OAAO,CAAC4D,WAAW,CAAC,EAAE;MAAET;IAAU,CAAC,CAAC;EACnG,CAAC,EAAE,CAAC3D,QAAQ,EAAEQ,OAAO,EAAEI,QAAQ,CAAC,CAAC;EACjC,MAAM0D,0BAA0B,GAAG/E,WAAW,CAACgF,KAAA,IAAgC;IAAA,IAA/B;MAAEP,WAAW;MAAEL;IAAU,CAAC,GAAAY,KAAA;IACxEJ,iBAAiB,CAAClD,WAAW,CAACa,OAAO,EAAE;MAAE6B;IAAU,CAAC,CAAC;IACrDG,aAAa,CAAC;MAAEE,WAAW;MAAEL;IAAU,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACG,aAAa,EAAEK,iBAAiB,CAAC,CAAC;EACtC,MAAMK,gBAAgB,GAAGjF,WAAW,CAAC,CAACkF,MAAM,EAAAC,KAAA,KAA4B;IAAA,IAA1B;MAAEf,SAAS;MAAEgB;IAAO,CAAC,GAAAD,KAAA;IACjE,IAAInB,EAAE;IACN,IAAIpC,UAAU,CAACW,OAAO,KAAK,kBAAkB,IAAI2C,MAAM,KAAKrD,WAAW,CAACU,OAAO,EAAE;MAC/EX,UAAU,CAACW,OAAO,GAAG,QAAQ;IAC/B;IACA,IAAI2C,MAAM,KAAKrD,WAAW,CAACU,OAAO,EAAE;MAClCX,UAAU,CAACW,OAAO,GAAG,kBAAkB;IACzC,CAAC,MAAM;MACLV,WAAW,CAACU,OAAO,IAAI2C,MAAM;IAC/B;IACA,QAAQtD,UAAU,CAACW,OAAO;MACxB,KAAK,QAAQ;QAAE;UACb,IAAI8C,gBAAgB,GAAGpE,OAAO,CAACoB,SAAS,CAAEC,MAAM,IAAK;YACnD,IAAIgD,GAAG;YACP,OAAO,CAAC,CAACA,GAAG,GAAGhD,MAAM,CAACiD,KAAK,MAAM,IAAI,IAAID,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACE,iBAAiB,CAAC,CAAC,CAACC,OAAO,CAAC5D,WAAW,CAACU,OAAO,CAAC,MAAM,CAAC;UAChI,CAAC,CAAC;UACF,IAAI8C,gBAAgB,GAAG,CAAC,EAAE;YACxBA,gBAAgB,GAAGpE,OAAO,CAACoB,SAAS,CAAEC,MAAM,IAAK;cAC/C,IAAIgD,GAAG;cACP,OAAO,CAAC,CAACA,GAAG,GAAGhD,MAAM,CAACiD,KAAK,MAAM,IAAI,IAAID,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACE,iBAAiB,CAAC,CAAC,CAACC,OAAO,CAACP,MAAM,CAAC,MAAM,CAAC;YACnH,CAAC,CAAC;YACFrD,WAAW,CAACU,OAAO,GAAG2C,MAAM;UAC9B;UACA,IAAIG,gBAAgB,IAAI,CAAC,EAAE;YACzB,IAAID,MAAM,EAAE;cACVR,iBAAiB,CAACS,gBAAgB,EAAE;gBAAEjB;cAAU,CAAC,CAAC;YACpD,CAAC,MAAM;cACLV,cAAc,CAAC2B,gBAAgB,EAAE;gBAAEzB,MAAM,EAAE;cAAK,CAAC,CAAC;YACpD;UACF;UACA;QACF;MACA,KAAK,kBAAkB;QAAE;UACvB,MAAM8B,kBAAkB,GAAGN,MAAM,GAAG,CAACpB,EAAE,GAAGvC,aAAa,CAACc,OAAO,MAAM,IAAI,IAAIyB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,GAAGtC,WAAW,CAACa,OAAO;UAC1H,IAAI8C,gBAAgB,GAAGpE,OAAO,CAACoB,SAAS,CAAC,CAACC,MAAM,EAAEF,KAAK,KAAK;YAC1D,IAAIkD,GAAG;YACP,OAAOlD,KAAK,GAAGsD,kBAAkB,IAAI,CAAC,CAACJ,GAAG,GAAGhD,MAAM,CAACiD,KAAK,MAAM,IAAI,IAAID,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACE,iBAAiB,CAAC,CAAC,CAACC,OAAO,CAACP,MAAM,CAAC,MAAM,CAAC;UACjJ,CAAC,CAAC;UACF,IAAIG,gBAAgB,GAAG,CAAC,EAAE;YACxBA,gBAAgB,GAAGpE,OAAO,CAACoB,SAAS,CAAEC,MAAM,IAAK;cAC/C,IAAIgD,GAAG;cACP,OAAO,CAAC,CAACA,GAAG,GAAGhD,MAAM,CAACiD,KAAK,MAAM,IAAI,IAAID,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACE,iBAAiB,CAAC,CAAC,CAACC,OAAO,CAACP,MAAM,CAAC,MAAM,CAAC;YACnH,CAAC,CAAC;UACJ;UACA,IAAIG,gBAAgB,IAAI,CAAC,EAAE;YACzB,IAAID,MAAM,EAAE;cACVR,iBAAiB,CAACS,gBAAgB,EAAE;gBAAEjB;cAAU,CAAC,CAAC;YACpD,CAAC,MAAM;cACLV,cAAc,CAAC2B,gBAAgB,EAAE;gBAAEzB,MAAM,EAAE;cAAK,CAAC,CAAC;YACpD;UACF;UACA;QACF;IACF;IACAU,YAAY,CAACxC,WAAW,CAACS,OAAO,CAAC;IACjCT,WAAW,CAACS,OAAO,GAAGoD,UAAU,CAAC,MAAM;MACrC,IAAI/D,UAAU,CAACW,OAAO,KAAK,QAAQ,EAAE;QACnCV,WAAW,CAACU,OAAO,GAAG,EAAE;MAC1B;IACF,CAAC,EAAElC,kBAAkB,CAAC;EACxB,CAAC,EAAE,CAACqD,cAAc,EAAEzC,OAAO,EAAE2D,iBAAiB,CAAC,CAAC;EAChD,MAAMgB,eAAe,GAAG5F,WAAW,CAAE6F,KAAK,IAAK;IAC7C,IAAI7B,EAAE;IACN,IAAI6B,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtB;IACF;IACAD,KAAK,CAACE,cAAc,CAAC,CAAC;IACtB,CAAC/B,EAAE,GAAG5C,SAAS,CAACmB,OAAO,MAAM,IAAI,IAAIyB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACR,KAAK,CAAC,CAAC;IACxEkB,cAAc,CAAC;MAAEN,SAAS,EAAEyB;IAAM,CAAC,CAAC;IACpChF,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACgF,KAAK,CAAC;EAC9E,CAAC,EAAE,CAAChF,WAAW,EAAEO,SAAS,EAAEsD,cAAc,CAAC,CAAC;EAC5C,MAAMsB,iBAAiB,GAAGhG,WAAW,CAAE6F,KAAK,IAAK;IAC/Cd,0BAA0B,CAAC;MAAEN,WAAW,EAAE,IAAI;MAAEL,SAAS,EAAEyB;IAAM,CAAC,CAAC;EACrE,CAAC,EAAE,CAACd,0BAA0B,CAAC,CAAC;EAChC,MAAMkB,aAAa,GAAGjG,WAAW,CAAE6F,KAAK,IAAK;IAC3C,MAAM;MAAEK,MAAM;MAAEC,IAAI;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAS,CAAC,GAAGT,KAAK;IAC1D,MAAM;MAAEU,UAAU;MAAEC,QAAQ;MAAEC,GAAG;MAAEC,KAAK;MAAEC,GAAG;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAI,CAAC,GAAG5G,kBAAkB;IACtF,MAAM6G,WAAW,GAAGb,MAAM,IAAIE,OAAO,IAAIC,OAAO,IAAIC,QAAQ;IAC5D,MAAMU,mBAAmB,GAAGd,MAAM,IAAIE,OAAO,IAAIC,OAAO;IACxD,IAAIF,IAAI,KAAKW,GAAG,IAAIE,mBAAmB,IAAIb,IAAI,KAAKW,GAAG,IAAIC,WAAW,EAAE;MACtE;IACF;IACA,QAAQZ,IAAI;MACV,KAAKI,UAAU;QAAE;UACfV,KAAK,CAACE,cAAc,CAAC,CAAC;UACtB,IAAI,CAAChF,IAAI,EAAE;YACTmD,YAAY,CAAC;cAAEE,SAAS,EAAEyB;YAAM,CAAC,CAAC;YAClC;UACF;UACAnC,cAAc,CAAC,MAAM,EAAE;YAAEE,MAAM,EAAE;UAAK,CAAC,CAAC;UACxC;QACF;MACA,KAAK4C,QAAQ;QAAE;UACbX,KAAK,CAACE,cAAc,CAAC,CAAC;UACtB,IAAI,CAAChF,IAAI,EAAE;YACTmD,YAAY,CAAC;cAAEE,SAAS,EAAEyB;YAAM,CAAC,CAAC;YAClC;UACF;UACAnC,cAAc,CAAC,UAAU,EAAE;YAAEE,MAAM,EAAE;UAAK,CAAC,CAAC;UAC5C;QACF;MACA,KAAK6C,GAAG;QAAE;UACRZ,KAAK,CAACE,cAAc,CAAC,CAAC;UACtB,IAAI,CAAChF,IAAI,EAAE;YACTmD,YAAY,CAAC;cAAEE,SAAS,EAAEyB;YAAM,CAAC,CAAC;YAClC;UACF;UACAnC,cAAc,CAAC,MAAM,EAAE;YAAEE,MAAM,EAAE;UAAK,CAAC,CAAC;UACxC;QACF;MACA,KAAK8C,KAAK;QAAE;UACV,IAAI,CAAC3F,IAAI,EAAE;YACT;UACF;UACA8E,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBhB,0BAA0B,CAAC;YAAEN,WAAW,EAAE,IAAI;YAAEL,SAAS,EAAEyB;UAAM,CAAC,CAAC;UACnE;QACF;MACA,KAAKc,GAAG;QAAE;UACR,IAAI,CAAC5F,IAAI,EAAE;YACT;UACF;UACA8E,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBxB,aAAa,CAAC;YAAEE,WAAW,EAAE,IAAI;YAAEL,SAAS,EAAEyB;UAAM,CAAC,CAAC;UACtD;QACF;MACA,KAAKe,IAAI;QAAE;UACTf,KAAK,CAACE,cAAc,CAAC,CAAC;UACtB,IAAI,CAAChF,IAAI,EAAE;YACTmD,YAAY,CAAC;cAAEE,SAAS,EAAEyB;YAAM,CAAC,CAAC;YAClC;UACF;UACAnC,cAAc,CAAC,OAAO,EAAE;YAAEE,MAAM,EAAE;UAAK,CAAC,CAAC;UACzC;QACF;MACA,KAAKiD,KAAK;QAAE;UACVhB,KAAK,CAACE,cAAc,CAAC,CAAC;UACtB,IAAIhF,IAAI,EAAE;YACRgE,0BAA0B,CAAC;cAAEN,WAAW,EAAE,IAAI;cAAEL,SAAS,EAAEyB;YAAM,CAAC,CAAC;UACrE,CAAC,MAAM;YACL3B,YAAY,CAAC;cAAEE,SAAS,EAAEyB;YAAM,CAAC,CAAC;UACpC;UACA;QACF;MACA,KAAKiB,GAAG;QAAE;UACR,IAAI,CAAC/F,IAAI,EAAE;YACT;UACF;UACA,IAAI,CAACuF,QAAQ,EAAE;YACbT,KAAK,CAACE,cAAc,CAAC,CAAC;UACxB;UACAhB,0BAA0B,CAAC;YACzBN,WAAW,EAAE,CAAC6B,QAAQ;YACtBlC,SAAS,EAAEyB;UACb,CAAC,CAAC;UACF;QACF;MACA;QACE,IAAI,CAACkB,WAAW,IAAIZ,IAAI,CAACc,KAAK,CAAC,MAAM,CAAC,EAAE;UACtCpB,KAAK,CAACE,cAAc,CAAC,CAAC;UACtBF,KAAK,CAACqB,eAAe,CAAC,CAAC;UACvBjC,gBAAgB,CAACkB,IAAI,CAACgB,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACzC/B,MAAM,EAAE,CAACrE,IAAI;YACbqD,SAAS,EAAEyB;UACb,CAAC,CAAC;QACJ;IACJ;EACF,CAAC,EAAE,CACDnC,cAAc,EACda,aAAa,EACbxD,IAAI,EACJmD,YAAY,EACZe,gBAAgB,EAChBF,0BAA0B,CAC3B,CAAC;EACF,MAAMqC,mBAAmB,GAAGpH,WAAW,CAAE6F,KAAK,IAAK;IACjDI,aAAa,CAACJ,KAAK,CAAC;IACpBjF,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACiF,KAAK,CAAC;EACxE,CAAC,EAAE,CAACI,aAAa,EAAErF,SAAS,CAAC,CAAC;EAC9B,MAAMyG,yBAAyB,GAAGrH,WAAW,CAAEoC,KAAK,IAAK;IACvDsB,cAAc,CAACtB,KAAK,CAAC;EACvB,CAAC,EAAE,CAACsB,cAAc,CAAC,CAAC;EACpB,MAAM4D,UAAU,GAAGtH,WAAW,CAAE6F,KAAK,IAAK;IACxC,IAAI9E,IAAI,EAAE;MACR;IACF;IACAsD,qBAAqB,CAAC,CAAC;IACvB7D,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACqF,KAAK,CAAC;EAC/D,CAAC,EAAE,CAACxB,qBAAqB,EAAE7D,MAAM,EAAEO,IAAI,CAAC,CAAC;EACzC,MAAMwG,WAAW,GAAGvH,WAAW,CAAE6F,KAAK,IAAK;IACzCxB,qBAAqB,CAAC,CAAC;IACvB1D,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACkF,KAAK,CAAC;EAClE,CAAC,EAAE,CAACxB,qBAAqB,EAAE1D,OAAO,CAAC,CAAC;EACpC,MAAM6G,oBAAoB,GAAGxH,WAAW,CAAEyH,GAAG,IAAK;IAChDlG,WAAW,CAACgB,OAAO,GAAGkF,GAAG;IACzB,IAAI9F,iBAAiB,CAACY,OAAO,KAAK,KAAK,CAAC,EAAE;MACxCG,WAAW,CAACf,iBAAiB,CAACY,OAAO,CAAC;IACxC;EACF,CAAC,EAAE,CAACG,WAAW,CAAC,CAAC;EACjB,MAAMgF,kBAAkB,GAAG1H,WAAW,CAAC,CAAC2H,SAAS,EAAEvF,KAAK,KAAK;IAC3DZ,UAAU,CAACe,OAAO,CAACH,KAAK,CAAC,GAAGuF,SAAS;IACrC,IAAIhG,iBAAiB,CAACY,OAAO,KAAKH,KAAK,EAAE;MACvCM,WAAW,CAACf,iBAAiB,CAACY,OAAO,CAAC;IACxC;EACF,CAAC,EAAE,CAACG,WAAW,CAAC,CAAC;EACjBzC,SAAS,CAAC,MAAM;IACd,IAAI,CAACc,IAAI,EAAE;MACT,OAAO,MAAM,CACb,CAAC;IACH;IACA,MAAM6G,gBAAgB,GAAI/B,KAAK,IAAK;MAClC,IAAI7B,EAAE;MACN,MAAM6D,MAAM,GAAGhC,KAAK,CAACgC,MAAM;MAC3B,IAAI,EAAE,CAAC7D,EAAE,GAAG1C,UAAU,CAACiB,OAAO,MAAM,IAAI,IAAIyB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC8D,QAAQ,CAACD,MAAM,CAAC,CAAC,EAAE;QACzFhC,KAAK,CAACE,cAAc,CAAC,CAAC;QACtBxB,aAAa,CAAC;UAAEE,WAAW,EAAE,KAAK;UAAEL,SAAS,EAAEyB;QAAM,CAAC,CAAC;MACzD;IACF,CAAC;IACDkC,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEJ,gBAAgB,CAAC;IACxD,OAAO,MAAM;MACXG,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEL,gBAAgB,CAAC;IAC7D,CAAC;EACH,CAAC,EAAE,CAACrD,aAAa,EAAExD,IAAI,EAAEO,UAAU,CAAC,CAAC;EACrC,OAAOxB,OAAO,CAAC,OAAO;IACpB0C,YAAY;IACZ6E,yBAAyB;IACzBC,UAAU;IACVF,mBAAmB;IACnBc,qBAAqB,EAAEjC,aAAa;IACpCsB,WAAW;IACX3B,eAAe;IACfI,iBAAiB;IACjBwB,oBAAoB;IACpBE,kBAAkB;IAClB3G,IAAI;IACJoB;EACF,CAAC,CAAC,EAAE,CACFK,YAAY,EACZ6E,yBAAyB,EACzBC,UAAU,EACVF,mBAAmB,EACnBG,WAAW,EACXtB,aAAa,EACbL,eAAe,EACfI,iBAAiB,EACjBwB,oBAAoB,EACpBE,kBAAkB,EAClB3G,IAAI,EACJoB,cAAc,CACf,CAAC;AACJ,CAAC;AAED,SAAS7B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}