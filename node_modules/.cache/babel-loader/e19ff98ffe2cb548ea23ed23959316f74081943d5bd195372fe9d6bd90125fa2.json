{"ast":null,"code":"import { useState, useCallback } from 'react';\nfunction useControlledOrUncontrolled(_ref) {\n  let {\n    defaultValue,\n    onChange,\n    onChangePropName = \"onChange\",\n    readOnly,\n    value,\n    valuePropName = \"value\"\n  } = _ref;\n  const isControlled = value !== void 0;\n  const [controlledValue, setControlledValue] = useState(defaultValue);\n  const handleChangeIfUncontrolled = useCallback(newValue => {\n    if (!isControlled) {\n      setControlledValue(newValue);\n    }\n  }, [isControlled]);\n  if (isControlled && typeof onChange !== \"function\" && !readOnly) {\n    const message = \"Warning: You provided a `\".concat(valuePropName, \"` prop to a component without an `\").concat(onChangePropName, \"` handler.\").concat(valuePropName === \"value\" ? \"This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `\".concat(onChangePropName, \"` or `readOnly`.\") : \"This breaks the component state. You must provide an `\".concat(onChangePropName, \"` function that updates `\").concat(valuePropName, \"`.\"));\n    console.warn(message);\n  }\n  return [isControlled ? value : controlledValue, handleChangeIfUncontrolled];\n}\nexport { useControlledOrUncontrolled as default };","map":{"version":3,"names":["useState","useCallback","useControlledOrUncontrolled","_ref","defaultValue","onChange","onChangePropName","readOnly","value","valuePropName","isControlled","controlledValue","setControlledValue","handleChangeIfUncontrolled","newValue","message","concat","console","warn","default"],"sources":["/Users/eliana/Documents/Code/homepage/node_modules/react95/dist/common/hooks/useControlledOrUncontrolled.mjs"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nfunction useControlledOrUncontrolled({ defaultValue, onChange, onChangePropName = \"onChange\", readOnly, value, valuePropName = \"value\" }) {\n  const isControlled = value !== void 0;\n  const [controlledValue, setControlledValue] = useState(defaultValue);\n  const handleChangeIfUncontrolled = useCallback((newValue) => {\n    if (!isControlled) {\n      setControlledValue(newValue);\n    }\n  }, [isControlled]);\n  if (isControlled && typeof onChange !== \"function\" && !readOnly) {\n    const message = `Warning: You provided a \\`${valuePropName}\\` prop to a component without an \\`${onChangePropName}\\` handler.${valuePropName === \"value\" ? `This will render a read-only field. If the field should be mutable use \\`defaultValue\\`. Otherwise, set either \\`${onChangePropName}\\` or \\`readOnly\\`.` : `This breaks the component state. You must provide an \\`${onChangePropName}\\` function that updates \\`${valuePropName}\\`.`}`;\n    console.warn(message);\n  }\n  return [isControlled ? value : controlledValue, handleChangeIfUncontrolled];\n}\n\nexport { useControlledOrUncontrolled as default };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,SAASC,2BAA2BA,CAAAC,IAAA,EAAsG;EAAA,IAArG;IAAEC,YAAY;IAAEC,QAAQ;IAAEC,gBAAgB,GAAG,UAAU;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,aAAa,GAAG;EAAQ,CAAC,GAAAN,IAAA;EACtI,MAAMO,YAAY,GAAGF,KAAK,KAAK,KAAK,CAAC;EACrC,MAAM,CAACG,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAACI,YAAY,CAAC;EACpE,MAAMS,0BAA0B,GAAGZ,WAAW,CAAEa,QAAQ,IAAK;IAC3D,IAAI,CAACJ,YAAY,EAAE;MACjBE,kBAAkB,CAACE,QAAQ,CAAC;IAC9B;EACF,CAAC,EAAE,CAACJ,YAAY,CAAC,CAAC;EAClB,IAAIA,YAAY,IAAI,OAAOL,QAAQ,KAAK,UAAU,IAAI,CAACE,QAAQ,EAAE;IAC/D,MAAMQ,OAAO,+BAAAC,MAAA,CAAgCP,aAAa,wCAAAO,MAAA,CAAuCV,gBAAgB,gBAAAU,MAAA,CAAcP,aAAa,KAAK,OAAO,oHAAAO,MAAA,CAAuHV,gBAAgB,iFAAAU,MAAA,CAAkFV,gBAAgB,+BAAAU,MAAA,CAA8BP,aAAa,OAAK,CAAE;IACnbQ,OAAO,CAACC,IAAI,CAACH,OAAO,CAAC;EACvB;EACA,OAAO,CAACL,YAAY,GAAGF,KAAK,GAAGG,eAAe,EAAEE,0BAA0B,CAAC;AAC7E;AAEA,SAASX,2BAA2B,IAAIiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}